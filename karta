// tu nalezy wrzucic biblioteki SPI , RTC ,GPIO itp przy korzystaniu z CoCoxa 
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_rtc.h"
#include "stm32f4xx_spi.h"
#include "stm32f4xx_tim.h"
//#include "fatfs/src/ff.h" - do sprawdzenia czy nie ma nowszej biblioteki
//#include "fatfs/src/diskio.h" - ||- 

static
void SELECT (void) 	// CS w stan niski
{
  GPIO_ResetBits(GPIOC, GPIO_Pin_12);
 
}
 
 
 
static
void DESELECT (void) 		// CS w stan wysoki
{
  GPIO_SetBits(GPIOC, GPIO_Pin_12);
}
 
 
 
static
void xmit_spi (BYTE Data)  	// Wyslanie bajtu do SD
{
  // Wyslanie bajtu
  while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
  SPI_I2S_SendData(SPI1, Data);
}
 
 
 
static
BYTE rcvr_spi (void) 		// Odebranie bajtu z SD
{
  u8 Data = 0;
 
  // Wyslanie 0xFF
  while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
  SPI_I2S_SendData(SPI1, 0xFF);
 
  // Odebranie bajtu
  while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
  Data = SPI_I2S_ReceiveData(SPI1);
 
  return Data;
}

static
BYTE wait_ready (void)
{
  BYTE res;
 
  Timer2 = 50;    // Czeka przez 500ms
 
  rcvr_spi();
  do res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
  return res;
}

static 
void power_on (void)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitStructure;
  u8 i, cmd_arg[6];
  u32 Count = 0xFFF;
 
  // Konfiguracja wyprowadzen i kontrolera SPI:
 
  // Wlaczenie sygnalow zegarowych dla peryferiow
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | <
                          RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO, ENABLE);
  // PA4 jako CS
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 
  //SCK, MISO and MOSI
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 
  // Konfiguracja SPI
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
  SPI_Init(SPI1, &SPI_InitStructure);
 
  // Wlacz SPI
  SPI_Cmd(SPI1, ENABLE);
 
  // Inicjalizacja karty i przelaczenie w tryb SPI:
 
  DESELECT();		// CS = 1
 
  for (i = 0; i < 10; i++)
     xmit_spi(0xFF);	// Wyslij 0xFF 10 razy = 80 cykli zegarowych
 
  // (wymaganych co najmniej 74 cykli)
  SELECT();		// CS = 0
 
  // Przygotowanie ramki inicjujacej do wyslania
  cmd_arg[0] = (CMD0 | 0x40);
  cmd_arg[1] = 0;	// Argument komendy
  cmd_arg[2] = 0;	// nawet, gdy komenda go nie ma
  cmd_arg[3] = 0;	// musi zostac wyslany w postaci zer
  cmd_arg[4] = 0;
  cmd_arg[5] = 0x95;	// CRC = 0x95
 
  for (i = 0; i < 6; i++)		// Wyslanie ramki
     xmit_spi(cmd_arg[i]);
 
  while ((rcvr_spi() != 0x01) && Count) // Czeka na 0x01
     Count--;
 
  DESELECT();		// CS = 1
  xmit_spi(0XFF);	// Wyslij 0xFF
 
  PowerFlag = 1;
}
void SysTick_Conf(void)
{
  // SysTick bedzie taktowany z f = 72MHz/8 = 9MHz
  SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	
 
  // Przerwanie ma byc co 10ms, f = 9MHz czyli liczy od 90000
  SysTick_SetReload(90000);
 
  // Odblokowanie przerwania od timera SysTick
  SysTick_ITConfig(ENABLE);
 
  // Wlaczenie timera
  SysTick_CounterCmd(SysTick_Counter_Enable);
}
void SysTickHandler(void)
{
// Przerwanie
  disk_timerproc();
}

/*
Operacje na plikach i katalogach : 
f_mount	„montuje” (rejestruje) dysk logiczny w systemie
f_open	otwieranie lub/i tworzenie pliku
f_close	zamykanie pliku
f_read	czytanie zawartości pliku
f_write	zapisywanie pliku
f_lseek	przesuwa wskaźnik zapisu/odczytu pliku
f_truncate	skraca długość pliku
f_sync	działanie podobne do f_close, z tym, że plik pozostaje otwarty, więc dalej można na nim wykonywać operacje
f_opendir	otwiera katalog
f_readdir	czyta zawartość katalogu
f_getfree	pozwala odczytać liczbę wolnych klastrów
f_stat	odczytuje informacje o pliku/katalogu
f_mkdir	tworzy katalog
f_unlink	usuwa katalog lub plik
f_chmod	zmienia atrybuty pliku lub katalogu
f_utime	zmienia datę i czas dla określonego pliku lub katalogu
f_rename	zmiana nazwy lub przeniesienie pliku/katalogu
f_mkfs	tworzy system plików na nośniku
f_forward	czyta dane z nosnika i bezpośrednio przekazuje dalej
*/

int main(void)
{
// Przykładowy program wykonujący podstawowe operacje na plikach i katalogach
  FRESULT fresult;
  FIL plik;
  WORD zapisanych_bajtow;
 
  RCC_Conf(); 
  GPIO_Conf(); 
  SysTick_Conf();
 
  fresult = f_mount(0, &g_sFatFs);
 
  // Tworzenie pliku
  fresult = f_open (&plik,"plik.txt", FA_CREATE_ALWAYS);
  fresult = f_close (&plik);
 
  // Tworzenie katalogu
  fresult = f_mkdir("katalog1");
 
  // Zapis pliku
  fresult = f_open (&plik,"plik.txt", FA_WRITE);
  fresult = f_write(&plik, "zawartosc pliku", 15, &zapisanych_bajtow);
  fresult = f_close (&plik);
 
  // Usuniecie pliku
  fresult = f_unlink("plik.txt");
 
  while(1);
}
